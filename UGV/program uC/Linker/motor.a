;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 4/22/2013
;Author  : estheim
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;unsigned int counterkanan,counterkiri;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 001C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001D counterkanan++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 001E }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0022 {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0023 counterkiri++;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0024 }
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;
;#include <stdio.h>
;#define kanan PORTC.0;
;#define kiri PORTC.1;
;int i,j;
;bit status;
;unsigned char datas[20];
;long pwml,pwmr;
;
;void maju(void);
;void mundur(void);
;void kanan90(void);
;void kiri90(void);
;void stop(void);
;void kirim(void);
;void baca(void);
;void proses(void);
;long rubahdata(unsigned char arah);
;void cekarah(void);
;
;void main(void)
; 0000 003A {
;PCODE: $0000001D VOL: 0
; 0000 003B PORTB=0x00;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 003C DDRB=0x0E;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 003D PORTC=0xFF;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 003E DDRC=0xFF;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 003F PORTD=0x00;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0040 DDRD=0x00;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0041 TCCR0=0x00;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0042 TCNT0=0x00;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0043 // Timer/Counter 1 initialization
; 0000 0044 // Clock source: System Clock
; 0000 0045 // Clock value: 16000.000 kHz
; 0000 0046 // Mode: Ph. correct PWM top=0x00FF
; 0000 0047 // OC1A output: Non-Inv.
; 0000 0048 // OC1B output: Non-Inv.
; 0000 0049 // Noise Canceler: Off
; 0000 004A // Input Capture on Falling Edge
; 0000 004B // Timer1 Overflow Interrupt: Off
; 0000 004C // Input Capture Interrupt: Off
; 0000 004D // Compare A Match Interrupt: Off
; 0000 004E // Compare B Match Interrupt: Off
; 0000 004F TCCR1A=0xA1;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0050 TCCR1B=0x09;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0051 TCNT1H=0x00;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0052 TCNT1L=0x00;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0053 ICR1H=0x00;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0054 ICR1L=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0055 OCR1AH=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0056 OCR1AL=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0057 OCR1BH=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0058 OCR1BL=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0059 // Timer/Counter 2 initialization
; 0000 005A // Clock source: System Clock
; 0000 005B // Clock value: Timer2 Stopped
; 0000 005C // Mode: Normal top=0xFF
; 0000 005D // OC2 output: Set on compare match
; 0000 005E ASSR=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 005F TCCR2=0x30;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0060 TCNT2=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0061 OCR2=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0062 // External Interrupt(s) initialization
; 0000 0063 // INT0: On
; 0000 0064 // INT0 Mode: Rising Edge
; 0000 0065 // INT1: On
; 0000 0066 // INT1 Mode: Rising Edge
; 0000 0067 GICR|=0xC0;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0068 MCUCR=0x0F;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0069 GIFR=0xC0;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 006A // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 006B TIMSK=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 006C // USART initialization
; 0000 006D // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 006E // USART Receiver: On
; 0000 006F // USART Transmitter: On
; 0000 0070 // USART Mode: Asynchronous
; 0000 0071 // USART Baud Rate: 9600
; 0000 0072 UCSRA=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0073 UCSRB=0x18;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0074 UCSRC=0x86;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0075 UBRRH=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0076 UBRRL=0x67;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0077 ACSR=0x80;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0078 SFIOR=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0079 ADCSRA=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 007A SPCR=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 007B TWCR=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 007C // Global enable interrupts
; 0000 007D #asm("sei")
;PCODE: $00000067 VOL: 0
	sei
;PCODE: $00000068 VOL: 0
; 0000 007E pwml=240;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 007F pwmr=240;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0080 printf("begin program\r\n");
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0081 while (1){
;PCODE: $00000074 VOL: 0
; 0000 0082       status=0;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0083       kirim();
;PCODE: $00000078 VOL: 0
; 0000 0084       baca();
;PCODE: $00000079 VOL: 0
; 0000 0085       printf("%s,%i\r\n",datas,status);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0086       proses();
;PCODE: $00000088 VOL: 0
; 0000 0087       }
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0088 }
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;void maju(void) {
; 0000 0089 void maju(void) {
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 008A     OCR1AL=pwmr;  //  kanan
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 008B     OCR1BL=pwml; //    kiri
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 008C     PORTC.0=1;// kanan
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 008D     PORTC.1=1;// kiri
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 008E };
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;void stop(void){
; 0000 008F void stop(void){
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0090     OCR1AL=0;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0091     OCR1BL=0;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0092     PORTC.0=0;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0093     PORTC.1=0;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0094 };
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;void mundur(void){
; 0000 0095 void mundur(void){
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0096     OCR1AL=pwmr;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0097     OCR1BL=pwml;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0098     PORTC.0=0;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0099     PORTC.1=0;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 009A };
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;void kanan90(void){
; 0000 009B void kanan90(void){
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 009C     OCR1AL=pwmr;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 009D     OCR1BL=pwml;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 009E     PORTC.0=0;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 009F     PORTC.1=1;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00A0 };
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;void kiri90(void){
; 0000 00A1 void kiri90(void){
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00A2     OCR1AL=pwmr;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00A3     OCR1BL=pwml;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00A4     PORTC.0=1;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00A5     PORTC.1=0;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00A6 };
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;void kirim(void){
; 0000 00A7 void kirim(void){
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00A8     scanf("%s",datas);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00A9 }
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;void baca(void)
; 0000 00AB {
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00AC j=0;
;PCODE: $000000DA VOL: 0
; 0000 00AD  if(datas[j]==36)//$
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00AE  {
; 0000 00AF  j=j+1;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00B0    if(datas[j]==109) {//ascii m
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00B1    i=0;
;PCODE: $000000E8 VOL: 0
; 0000 00B2    j=0;
;PCODE: $000000E9 VOL: 0
; 0000 00B3    status=1;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00B4    }
; 0000 00B5    else {
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00B6    status=0;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00B7    }
;PCODE: $000000F2 VOL: 0
; 0000 00B8  }
; 0000 00B9  else{
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00BA  status=0;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00BB  }
;PCODE: $000000F8 VOL: 0
; 0000 00BC }
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;void proses(void)
; 0000 00BE {
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00BF     if(status==1){
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00C0      //   printf("rubah data");
; 0000 00C1         pwml=rubahdata(0);       //0 for left, 1 for right
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00C2         pwmr=rubahdata(1);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00C3         cekarah(); //untuk arah
;PCODE: $00000106 VOL: 0
; 0000 00C4         status=0;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00C5     }
; 0000 00C6     else
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00C7     {
; 0000 00C8     stop();
;PCODE: $0000010C VOL: 0
; 0000 00C9     }
;PCODE: $0000010D VOL: 0
; 0000 00CA     printf("$slave,%3d,%3d\r\n",pwml,pwmr);
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00CB     delay_ms(1); //delay untuk mencegah error
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00CC     printf("$counter,%i,%i\r\n",counterkanan,counterkiri);
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00CD     counterkanan=0;
;PCODE: $00000129 VOL: 0
; 0000 00CE     counterkiri=0;
;PCODE: $0000012A VOL: 0
; 0000 00CF }
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;long rubahdata(unsigned char arah)
; 0000 00D1 {
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00D2     unsigned char temp;
; 0000 00D3     unsigned char a,b,c;
; 0000 00D4     unsigned char pwm;
; 0000 00D5     if (arah==0){
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;	arah -> Y+6
;	temp -> R17
;	a -> R16
;	b -> R19
;	c -> R18
;	pwm -> R21
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00D6         a=(datas[8]-48)*100;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00D7         b=(datas[9]-48)*10;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00D8         c=datas[10]-48;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00D9         temp=a+b+c;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00DA     }
; 0000 00DB     else if (arah==1) {
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00DC         a=(datas[12]-48)*100;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00DD         b=(datas[13]-48)*10;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00DE         c=datas[14]-48;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00DF         temp=a+b+c;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00E0     }
; 0000 00E1     else{
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00E2     pwm=0;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00E3     }
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00E4     pwm=temp;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00E5 return pwm;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00E6 }
;PCODE: $0000016F VOL: 0
;void cekarah(void){
; 0000 00E7 void cekarah(void){
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 00E8     if (datas[16]=='1' && datas[18]=='1'){
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00E9       maju();
;PCODE: $0000017E VOL: 0
; 0000 00EA     }
; 0000 00EB     else if (datas[16]=='0' && datas[18]=='0'){
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 00EC       mundur();
;PCODE: $0000018D VOL: 0
; 0000 00ED     }
; 0000 00EE     else if (datas[16]=='1' && datas[18]=='0'){
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 00EF       kanan90();
;PCODE: $0000019C VOL: 0
; 0000 00F0     }
; 0000 00F1     else if (datas[16]=='0' && datas[18]=='1'){
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 00F2       kiri90();
;PCODE: $000001AB VOL: 0
; 0000 00F3     }
; 0000 00F4 }
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
